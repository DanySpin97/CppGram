[../include/cpr/multipart.h:36]: (style) Class 'Multipart' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cpr/payload.h:34]: (style) Class 'Payload' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cpr/cookies.h:14]: (style) Class 'Cookies' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cpr/cookies.h:15]: (style) Class 'Cookies' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cpr/parameters.h:24]: (style) Class 'Parameters' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cpr/proxies.h:14]: (style) Class 'Proxies' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cpr/timeout.h:10]: (style) Class 'Timeout' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:55]: (style) Class 'Exception' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:70]: (style) Class 'RuntimeError' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:81]: (style) Class 'LogicError' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:282]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:283]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:284]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:286]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:287]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:289]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:290]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:307]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:308]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:312]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:227]: (style) Class 'CZString' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:631]: (style) Class 'PathArgument' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:632]: (style) Class 'PathArgument' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:633]: (style) Class 'PathArgument' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/value.h:766]: (style) Class 'ValueConstIterator' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/reader.h:58]: (style) Class 'Reader' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/json/writer.h:274]: (style) Class 'StyledStreamWriter' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cppgram/logger.h:12]: (style) Class 'Logger' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cppgram/structures.h:55]: (style) Struct 'chat' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cppgram/structures.h:63]: (style) Struct 'user' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cppgram/structures.h:112]: (style) Struct 'inlineQuery' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cppgram/structures.h:124]: (style) Struct 'choosenInlineResult' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[../include/cpr/body.h:26]: (performance) Parameter 'il' is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++.
[../include/json/value.h:310]: (style) Class 'Value' has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.
[logger.cpp:46]: (style) Obsolete function 'asctime' called. It is recommended to use 'strftime' instead.
[structures.cpp:80]: (warning) Member variable 'inlineQuery::location' is not initialized in the constructor.
[structures.cpp:101]: (warning) Member variable 'choosenInlineResult::location' is not initialized in the constructor.
[structures.cpp:82]: (performance) When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don't explicitly write them to the initialization list. You could avoid assigning 'id' a value by passing the value to the constructor in the initialization list.
[structures.cpp:94]: (performance) When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don't explicitly write them to the initialization list. You could avoid assigning 'id' a value by passing the value to the constructor in the initialization list.
[structures.cpp:103]: (performance) When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don't explicitly write them to the initialization list. You could avoid assigning 'result_id' a value by passing the value to the constructor in the initialization list.
[../include/cppgram/structures.h:76]: (style) 'struct message' does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.
[../include/cppgram/structures.h:107]: (style) 'struct inlineQuery' does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.
[../include/cppgram/structures.h:117]: (style) 'struct choosenInlineResult' does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.
[../include/cppgram/structures.h:129]: (style) 'struct callbackQuery' does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.
[logger.cpp:29]: (style) The function 'log_warn' is never used.
[corebot.cpp:34]: (style) The function 'run' is never used.
[utils.cpp:38]: (style) The function 'split' is never used.
[exceptions.cpp:3]: (style) The function 'what' is never used.
(information) Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project's include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config.
